from pptx import Presentation
from pptx.util import Inches, Pt
from pptx.enum.text import MSO_AUTO_SIZE

def generate_powerpoint(title, text):
    """
    Generate a PowerPoint presentation with proper text margin control
    
    Args:
        title (str): Title for the presentation
        text (str): Content text to be formatted and added to slides
        
    Returns:
        str: Path to the saved PowerPoint file
    """
    # Create presentation
    prs = Presentation()
    
    # Title Slide
    slide_layout = prs.slide_layouts[0]
    slide = prs.slides.add_slide(slide_layout)
    slide.shapes.title.text = title
    slide.placeholders[1].text = "Generated by AI"
    
    # Process text and ensure proper formatting
    formatted_text = format_text_with_bullets(text)
    
    # Add slides with structured bullet points
    max_lines_per_slide = 6  # Prevent overcrowding
    current_slide_text = []
    for line in formatted_text:
        current_slide_text.append(line)
        if len(current_slide_text) >= max_lines_per_slide:
            add_slide_with_margin_control(prs, "Key Points", current_slide_text)
            current_slide_text = []
    
    # Add remaining text
    if current_slide_text:
        add_slide_with_margin_control(prs, "Additional Information", current_slide_text)
    
    # Save presentation to memory
    pptx_io = "/tmp/Generated_Summary_Presentation.pptx"
    prs.save(pptx_io)
    return pptx_io

def format_text_with_bullets(text):
    """
    Format raw text into bullet points
    
    Args:
        text (str): Raw text content
        
    Returns:
        list: List of formatted bullet points
    """
    # Split text into paragraphs
    paragraphs = text.split('\n')
    
    # Process paragraphs into bullet points
    bullet_points = []
    for paragraph in paragraphs:
        # Skip empty paragraphs
        if paragraph.strip() == "":
            continue
            
        # Clean up paragraph and add to bullet points
        cleaned = paragraph.strip()
        # If paragraph doesn't start with a bullet marker, add one
        if not cleaned.startswith(('•', '-', '*')):
            bullet_points.append(cleaned)
        else:
            # If it already has a bullet marker, just use the text
            bullet_points.append(cleaned.lstrip('•-* '))
    
    return bullet_points

def add_slide_with_margin_control(prs, title, bullet_points):
    """
    Add a slide with controlled text margins
    
    Args:
        prs (Presentation): Presentation object
        title (str): Slide title
        bullet_points (list): List of bullet points for this slide
        
    Returns:
        Slide: The newly created slide
    """
    # Use a content layout (title and content)
    slide_layout = prs.slide_layouts[1]  # typically layout 1 is title and content
    slide = prs.slides.add_slide(slide_layout)
    
    # Set slide title
    title_shape = slide.shapes.title
    title_shape.text = title
    
    # Get the content placeholder
    content_placeholder = slide.placeholders[1]
    
    # Access the text frame to control margins
    text_frame = content_placeholder.text_frame
    
    # Set margins (in inches) - adjust values as needed
    text_frame.margin_left = Inches(0.1)
    text_frame.margin_right = Inches(0.1)
    text_frame.margin_top = Inches(0.05)
    text_frame.margin_bottom = Inches(0.05)
    
    # Set word wrap and auto-fit options
    text_frame.word_wrap = True
    text_frame.auto_size = MSO_AUTO_SIZE.TEXT_TO_FIT_SHAPE
    
    # Add bullet points
    for point in bullet_points:
        p = text_frame.add_paragraph()
        p.text = point
        p.level = 0  # Bullet level (0 = first level)
        
        # Set paragraph spacing
        p.space_after = Pt(6)  # Spacing after paragraph
        
        # Set font properties
        font = p.font
        font.size = Pt(18)  # Font size
        
    return slide

# Example usage
if __name__ == "__main__":
    title = "Sample Presentation"
    text = """
    This is the first point about our topic.
    Here is the second important point to consider.
    The third point explains additional details.
    Fourth, we need to consider alternatives.
    Fifth point shows the benefits of our approach.
    Sixth point addresses potential challenges.
    Here are some recommendations based on our findings.
    And finally, next steps to implement our solution.
    """
    
    output_path = generate_powerpoint(title, text)
    print(f"PowerPoint saved to: {output_path}")
